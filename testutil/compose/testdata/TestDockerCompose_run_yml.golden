version: "3.8"

x-node-base: &node-base
  image: ghcr.io/obolnetwork/charon:latest
  entrypoint: /usr/local/bin/charon
  command: run
  networks: [compose]
  volumes: [testdir:/compose]
  depends_on: [bootnode] 

services:
  node0:
    <<: *node-base
    
    environment:
      CHARON_DATA_DIR: /compose/node0
      CHARON_PRIVATE_KEY_FILE: /compose/node0/charon-enr-private-key
      CHARON_SIMNET_VALIDATOR_KEYS_DIR: /compose/node0/validator_keys
      CHARON_JAEGER_SERVICE: node0
      CHARON_JAEGER_ADDRESS: jaeger:6831
      CHARON_DEFINITION_FILE: /compose/cluster-definition.json
      CHARON_LOCK_FILE: /compose/cluster-lock.json
      CHARON_MONITORING_ADDRESS: 0.0.0.0:3620
      CHARON_VALIDATOR_API_ADDRESS: 0.0.0.0:3600
      CHARON_P2P_EXTERNAL_HOSTNAME: node0
      CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
      CHARON_P2P_UDP_ADDRESS: 0.0.0.0:3630
      CHARON_P2P_BOOTNODES: http://bootnode:3640/enr
      CHARON_P2P_BOOTNODE_RELAY: "false"
      CHARON_BEACON_NODE_ENDPOINT: 
      CHARON_SIMNET_VALIDATOR_MOCK: "false"
      CHARON_SIMNET_BEACON_MOCK: "true"
      CHARON_LOG_LEVEL: debug
      CHARON_FEATURE_SET: alpha
    
    ports:
      - "3600:3600"
      
      - "3610:3610"
      
      - "3620:3620"
      
      - "3630:3630"
      
  node1:
    <<: *node-base
    
    environment:
      CHARON_DATA_DIR: /compose/node1
      CHARON_PRIVATE_KEY_FILE: /compose/node1/charon-enr-private-key
      CHARON_SIMNET_VALIDATOR_KEYS_DIR: /compose/node1/validator_keys
      CHARON_JAEGER_SERVICE: node1
      CHARON_JAEGER_ADDRESS: jaeger:6831
      CHARON_DEFINITION_FILE: /compose/cluster-definition.json
      CHARON_LOCK_FILE: /compose/cluster-lock.json
      CHARON_MONITORING_ADDRESS: 0.0.0.0:3620
      CHARON_VALIDATOR_API_ADDRESS: 0.0.0.0:3600
      CHARON_P2P_EXTERNAL_HOSTNAME: node1
      CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
      CHARON_P2P_UDP_ADDRESS: 0.0.0.0:3630
      CHARON_P2P_BOOTNODES: http://bootnode:3640/enr
      CHARON_P2P_BOOTNODE_RELAY: "false"
      CHARON_BEACON_NODE_ENDPOINT: 
      CHARON_SIMNET_VALIDATOR_MOCK: "false"
      CHARON_SIMNET_BEACON_MOCK: "true"
      CHARON_LOG_LEVEL: debug
      CHARON_FEATURE_SET: alpha
    
    ports:
      - "13600:3600"
      
      - "13610:3610"
      
      - "13620:3620"
      
      - "13630:3630"
      
  node2:
    <<: *node-base
    
    environment:
      CHARON_DATA_DIR: /compose/node2
      CHARON_PRIVATE_KEY_FILE: /compose/node2/charon-enr-private-key
      CHARON_SIMNET_VALIDATOR_KEYS_DIR: /compose/node2/validator_keys
      CHARON_JAEGER_SERVICE: node2
      CHARON_JAEGER_ADDRESS: jaeger:6831
      CHARON_DEFINITION_FILE: /compose/cluster-definition.json
      CHARON_LOCK_FILE: /compose/cluster-lock.json
      CHARON_MONITORING_ADDRESS: 0.0.0.0:3620
      CHARON_VALIDATOR_API_ADDRESS: 0.0.0.0:3600
      CHARON_P2P_EXTERNAL_HOSTNAME: node2
      CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
      CHARON_P2P_UDP_ADDRESS: 0.0.0.0:3630
      CHARON_P2P_BOOTNODES: http://bootnode:3640/enr
      CHARON_P2P_BOOTNODE_RELAY: "false"
      CHARON_BEACON_NODE_ENDPOINT: 
      CHARON_SIMNET_VALIDATOR_MOCK: "true"
      CHARON_SIMNET_BEACON_MOCK: "true"
      CHARON_LOG_LEVEL: debug
      CHARON_FEATURE_SET: alpha
    
    ports:
      - "23600:3600"
      
      - "23610:3610"
      
      - "23620:3620"
      
      - "23630:3630"
      
  node3:
    <<: *node-base
    
    environment:
      CHARON_DATA_DIR: /compose/node3
      CHARON_PRIVATE_KEY_FILE: /compose/node3/charon-enr-private-key
      CHARON_SIMNET_VALIDATOR_KEYS_DIR: /compose/node3/validator_keys
      CHARON_JAEGER_SERVICE: node3
      CHARON_JAEGER_ADDRESS: jaeger:6831
      CHARON_DEFINITION_FILE: /compose/cluster-definition.json
      CHARON_LOCK_FILE: /compose/cluster-lock.json
      CHARON_MONITORING_ADDRESS: 0.0.0.0:3620
      CHARON_VALIDATOR_API_ADDRESS: 0.0.0.0:3600
      CHARON_P2P_EXTERNAL_HOSTNAME: node3
      CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
      CHARON_P2P_UDP_ADDRESS: 0.0.0.0:3630
      CHARON_P2P_BOOTNODES: http://bootnode:3640/enr
      CHARON_P2P_BOOTNODE_RELAY: "false"
      CHARON_BEACON_NODE_ENDPOINT: 
      CHARON_SIMNET_VALIDATOR_MOCK: "false"
      CHARON_SIMNET_BEACON_MOCK: "true"
      CHARON_LOG_LEVEL: debug
      CHARON_FEATURE_SET: alpha
    
    ports:
      - "33600:3600"
      
      - "33610:3610"
      
      - "33620:3620"
      
      - "33630:3630"
      
  bootnode:
    <<: *node-base
    command: bootnode
    depends_on: []
    environment:
      CHARON_BOOTNODE_HTTP_ADDRESS: 0.0.0.0:3640
      CHARON_DATA_DIR: /compose/bootnode
      CHARON_P2P_BOOTNODES: ""
      CHARON_P2P_EXTERNAL_HOSTNAME: bootnode
      CHARON_P2P_TCP_ADDRESS: 0.0.0.0:3610
      CHARON_P2P_UDP_ADDRESS: 0.0.0.0:3630
  
  vc0-teku:
    image: consensys/teku:latest
    command: |
      validator-client
      --network=auto
      --beacon-node-api-endpoint="http://node0:3600"
      --validator-keys="/compose/node0/validator_keys/keystore-0.json:/compose/node0/validator_keys/keystore-0.txt"
      --validator-keys="/compose/node0/validator_keys/keystore-1.json:/compose/node0/validator_keys/keystore-1.txt"
      --validators-proposer-default-fee-recipient="0x0000000000000000000000000000000000000000"
    networks: [compose]
    depends_on: [node0]
    environment:
      NODE: node0
    volumes:
      - .:/compose
  
  vc1-lighthouse:
    build: lighthouse
    networks: [compose]
    depends_on: [node1]
    environment:
      NODE: node1
    volumes:
      - .:/compose
  
  vc3-teku:
    image: consensys/teku:latest
    command: |
      validator-client
      --network=auto
      --beacon-node-api-endpoint="http://node3:3600"
      --validator-keys="/compose/node3/validator_keys/keystore-0.json:/compose/node3/validator_keys/keystore-0.txt"
      --validator-keys="/compose/node3/validator_keys/keystore-1.json:/compose/node3/validator_keys/keystore-1.txt"
      --validators-proposer-default-fee-recipient="0x0000000000000000000000000000000000000000"
    networks: [compose]
    depends_on: [node3]
    environment:
      NODE: node3
    volumes:
      - .:/compose
  
  curl:
    # Can be used to curl services; e.g. docker-compose exec curl curl http://prometheus:9090/api/v1/rules\?type\=alert
    image: curlimages/curl:latest
    command: sleep 1d
    networks: [compose]

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks: [compose]
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks: [compose]
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/datasource.yml
      - ./grafana/notifiers.yml:/etc/grafana/provisioning/notifiers/notifiers.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/dash_simnet.json:/etc/dashboards/dash_simnet.json
      - ./grafana/dash_alerts.json:/etc/dashboards/dash_alerts.json

  jaeger:
    image: jaegertracing/all-in-one:latest
    networks: [compose]
    ports:
      - "16686:16686"
    
networks:
  compose:
