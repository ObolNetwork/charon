name: Build and Release Binaries

on:
  pull_request:
  push:
    branches:
      - main*

jobs:
  build-binaries:
    runs-on: ubuntu-24.04
    name: Build Cross-Platform Binaries
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: ./.github/actions/setup-go
      id: setup-go

    - name: Get app/version.Version from the code
      if: github.ref_type == 'branch'
      run: |
        VERSION=$(grep 'var version' app/version/version.go | cut -d'"' -f2)
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

    - name: Set version from git tag
      if: github.ref_type == 'tag'
      run: |
        echo "APP_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
        echo "LDFLAGS_VALUE=-X github.com/obolnetwork/charon/app/version.version=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Set build flags for branch
      if: github.ref_type == 'branch'
      run: |
        echo "LDFLAGS_VALUE=-X github.com/obolnetwork/charon/app/version.version=${{ env.APP_VERSION }}" >> $GITHUB_ENV

    - name: Install cross-compilation dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential gcc-aarch64-linux-gnu

    - name: Build x86_64 binary
      run: |
        mkdir -p dist
        docker run --rm --platform linux/amd64 \
          -v $(pwd):/workspace -w /workspace \
          golang:${{ steps.setup-go.outputs.go-version }}-bookworm \
          bash -c "apt-get update && apt-get install -y build-essential && \
          env CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -buildvcs=false -tags='netgo osusergo' -ldflags \"${{ env.LDFLAGS_VALUE }}\" \
          -o dist/charon-${{ env.RELEASE_VERSION }}-linux-amd64"

    - name: Build ARM64 binary
      run: |
        docker run --rm --platform linux/amd64 \
          -v $(pwd):/workspace -w /workspace \
          golang:${{ steps.setup-go.outputs.go-version }}-bookworm \
          bash -c "apt-get update && apt-get install -y gcc-aarch64-linux-gnu && \
          env CGO_ENABLED=1 GOOS=linux GOARCH=arm64 CC=aarch64-linux-gnu-gcc \
          go build -buildvcs=false -tags='netgo osusergo' -ldflags \"${{ env.LDFLAGS_VALUE }}\" \
          -o dist/charon-${{ env.RELEASE_VERSION }}-linux-arm64"

    - name: Test AMD64 Binary
      run: |
        echo "Listing host dist directory before test:"
        ls -l dist/
        echo "Testing AMD64 binary version..."
        docker run --rm --platform linux/amd64 \
          -v $(pwd)/dist:/dist \
          golang:${{ steps.setup-go.outputs.go-version }}-bookworm \
          bash -c "echo '--- Listing /dist inside container ---'; \
                   ls -l /dist; \
                   echo '--- Running version command ---'; \
                   VERSION_OUTPUT=$(/dist/charon-${{ env.RELEASE_VERSION }}-linux-amd64 version); \
                   VERSION_EXIT_CODE=$?; \
                   echo \"Exit Code: $VERSION_EXIT_CODE\"; \
                   echo \"Output:\"; \
                   echo \"$VERSION_OUTPUT\"; \
                   echo '--- Grepping output ---'; \
                   echo \"$VERSION_OUTPUT\" | grep '${{ env.RELEASE_VERSION }}'; \
                   echo '--- Grep finished ---'"

    - name: Test ARM64 Binary
      run: |
        echo "Listing host dist directory before test:"
        ls -l dist/
        echo "Testing ARM64 binary version..."
        # Use an AMD64 container but install QEMU and arm64 libs to run the ARM64 binary
        docker run --rm --platform linux/amd64 \
          -v $(pwd)/dist:/dist \
          golang:${{ steps.setup-go.outputs.go-version }}-bookworm \
          bash -c "dpkg --add-architecture arm64 && \
                   apt-get update > /dev/null && \
                   apt-get install -y -qq --no-install-recommends qemu-user-static libc6:arm64 > /dev/null && \
          echo '--- Listing /dist inside container ---'; \
          ls -l /dist; \
          echo '--- Running version command ---'; \
          VERSION_OUTPUT=$(/dist/charon-${{ env.RELEASE_VERSION }}-linux-arm64 version); \
          VERSION_EXIT_CODE=$?; \
          echo \"Exit Code: $VERSION_EXIT_CODE\"; \
          echo \"Output:\"; \
          echo \"$VERSION_OUTPUT\"; \
          echo '--- Grepping output ---'; \
          echo \"$VERSION_OUTPUT\" | grep '${{ env.RELEASE_VERSION }}'; \
          echo '--- Grep finished ---'"

    - name: Create release archives
      run: |
        cd dist
        tar czf charon-${{ env.RELEASE_VERSION }}-linux-amd64.tar.gz charon-${{ env.RELEASE_VERSION }}-linux-amd64
        tar czf charon-${{ env.RELEASE_VERSION }}-linux-arm64.tar.gz charon-${{ env.RELEASE_VERSION }}-linux-arm64
        echo "# Linux AMD64 (x86_64)" > checksums.txt
        sha256sum charon-${{ env.RELEASE_VERSION }}-linux-amd64.tar.gz >> checksums.txt
        echo -e "\n# Linux ARM64 (aarch64)" >> checksums.txt
        sha256sum charon-${{ env.RELEASE_VERSION }}-linux-arm64.tar.gz >> checksums.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: charon-${{ env.RELEASE_VERSION }}-binaries
        path: |
          dist/charon-${{ env.RELEASE_VERSION }}-linux-amd64
          dist/charon-${{ env.RELEASE_VERSION }}-linux-arm64
          dist/charon-${{ env.RELEASE_VERSION }}-linux-amd64.tar.gz
          dist/charon-${{ env.RELEASE_VERSION }}-linux-arm64.tar.gz
          dist/checksums.txt

    - name: Attach to GitHub Release
      if: github.event.workflow_run.conclusion == 'success'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/charon-${{ env.RELEASE_VERSION }}-linux-amd64.tar.gz
          dist/charon-${{ env.RELEASE_VERSION }}-linux-arm64.tar.gz
          dist/checksums.txt
        draft: true
        tag_name: ${{ github.event.workflow_run.head_branch }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
