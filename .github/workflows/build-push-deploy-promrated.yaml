name: Build and Deploy Promrated Image

on:
  push:
    branches:
      - main
    paths:
      - testutil/promrated/*

jobs:
  build-docker:
    runs-on: ubuntu-latest
    name: Build Docker Image
    steps:
    - uses: actions/checkout@v4
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Define docker image meta data tags
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          obolnetwork/promrated
          ghcr.io/obolnetwork/promrated
        tags: |
          type=sha,prefix=
          type=raw,value=latest

    - name: Login to Github container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to Dockerhub container registry
      uses: docker/login-action@v3
      with:
        username: obolnetwork
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: docker/build-push-action@v6
      with:
        context: .
        file: ./testutil/promrated/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: GITHUB_SHA=${{ github.sha }}
        tags: ${{ steps.meta.outputs.tags }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    - name: Set short git commit SHA
      id: vars
      run: echo "short_sha=$(git rev-parse --short=7 ${{ github.sha }})" >> $GITHUB_OUTPUT

    - name: Confirm git commit SHA output
      run: echo ${{ steps.vars.outputs.short_sha }}

    - name: Trigger promrated deploy job
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.CHARON_K8S_REPO_ACCESS_TOKEN }}
        repository: ObolNetwork/obol-infrastructure
        event-type: promrated-apply
        client-payload: '{"tag": "${{ steps.vars.outputs.short_sha }}"}'
