// Copyright Â© 2022-2024 Obol Labs Inc. Licensed under the terms of a Business Source License 1.1

// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	hotstuff "github.com/obolnetwork/charon/core/hotstuff"
	mock "github.com/stretchr/testify/mock"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

// Broadcast provides a mock function with given fields: ctx, msg
func (_m *Transport) Broadcast(ctx context.Context, msg *hotstuff.Msg) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *hotstuff.Msg) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendTo provides a mock function with given fields: ctx, id, msg
func (_m *Transport) SendTo(ctx context.Context, id hotstuff.ID, msg *hotstuff.Msg) error {
	ret := _m.Called(ctx, id, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendTo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, hotstuff.ID, *hotstuff.Msg) error); ok {
		r0 = rf(ctx, id, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
