// Copyright Â© 2021 Obol Technologies Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"bytes"
	"context"
	"fmt"
	"go/ast"
	"go/format"
	"go/printer"
	"go/token"
	"os"
	"regexp"
	"strings"
	"text/template"

	"github.com/obolnetwork/charon/app/errors"
	"github.com/obolnetwork/charon/app/log"

	"golang.org/x/tools/go/packages"
)

var (
	tpl = `package eth2metrics

// Code generated by genmetrics.go. DO NOT EDIT.

import (
	"github.com/obolnetwork/charon/app/errors"
	eth2client "github.com/attestantio/go-eth2-client"
{{range .Imports}}
	{{.}}
{{- end}}
)

{{range .Methods}}
	func (s *Service) {{.Name}}({{.Params}}) ({{.Results}}) {
		defer instrument("{{.Label}}")(err)

		{{.ResultNames}} = s.Service.{{.Name}}({{.ParamNames}})
		if err != nil {
			err = errors.Wrap(err, "eth2http")
		}

		return {{.ResultNames}}
	}
{{end}}
`

	// skip some provider methods.
	skip = map[string]bool{
		// eth2http doesn't implement these
		"GenesisValidatorsRoot": true,
		"Index":                 true,
		"PubKey":                true,
		"SyncState":             true,

		// these are cached, so no need to instrument.
		"GenesisTime":                   true,
		"Domain":                        true,
		"Spec":                          true,
		"Genesis":                       true,
		"ForkSchedule":                  true,
		"DepositContract":               true,
		"TargetAggregatorsPerCommittee": true,
		"FarFutureEpoch":                true,
		"SlotsPerEpoch":                 true,
		"SlotDuration":                  true,
		"NodeVersion":                   true,
		"SlotFromStateID":               true,
	}

	addImport = map[string]string{
		"EventHandlerFunc": "eth2client",
	}

	skipImport = map[string]bool{
		"\"time\"": true,
	}
)

func main() {
	ctx := context.Background()
	err := run(ctx)
	if err != nil {
		log.Error(ctx, "Run error", err)
	}
}

func run(_ context.Context) error {
	pkgs, err := packages.Load(
		&packages.Config{
			Mode: packages.NeedSyntax | packages.NeedTypesInfo | packages.NeedFiles | packages.NeedCompiledGoFiles | packages.NeedTypes,
		},
		"github.com/attestantio/go-eth2-client",
	)
	if err != nil {
		return errors.Wrap(err, "load package")
	}

	methods, err := parseEth2Methods(pkgs[0])
	if err != nil {
		return err
	}

	imprts, err := parseImports(pkgs[0])
	if err != nil {
		return err
	}

	if err := writeTemplate(methods, imprts); err != nil {
		return err
	}

	return nil
}

func parseImports(pkg *packages.Package) ([]string, error) {
	var (
		dups = make(map[string]bool)
		resp []string
	)

	for _, file := range pkg.Syntax {
		for _, imprt := range file.Imports {
			var b bytes.Buffer
			err := printer.Fprint(&b, pkg.Fset, imprt)
			if err != nil {
				return nil, errors.Wrap(err, "printf")
			}

			name := b.String()
			if skipImport[name] {
				continue
			}

			dups[name] = true
			resp = append(resp, name)
		}
	}

	return resp, nil
}

func writeTemplate(methods []Eth2Method, imports []string) error {
	t, err := template.New("").Parse(tpl)
	if err != nil {
		return errors.Wrap(err, "parse template")
	}

	var b bytes.Buffer
	err = t.Execute(&b, struct {
		Methods []Eth2Method
		Imports []string
	}{
		Methods: methods,
		Imports: imports,
	})
	if err != nil {
		return errors.Wrap(err, "exec template")
	}

	out, err := format.Source(b.Bytes())
	if err != nil {
		return errors.Wrap(err, "format")
	}

	err = os.WriteFile("metrics_gen.go", out, 0o644) //nolint:gosec
	if err != nil {
		return errors.Wrap(err, "write file")
	}

	return nil
}

type Eth2Method struct {
	Name    string
	params  []Field
	results []Field
}

func (m Eth2Method) Label() string {
	return toSnakeCase(m.Name)
}

func (m Eth2Method) Params() string {
	var resp []string
	for _, param := range m.params {
		resp = append(resp, fmt.Sprintf("%s %s", param.Name, param.Type))
	}

	return strings.Join(resp, ", ")
}

func (m Eth2Method) Results() string {
	var resp []string
	for _, result := range m.results {
		resp = append(resp, fmt.Sprintf("%s %s", result.Name, result.Type))
	}

	return strings.Join(resp, ", ")
}

func (m Eth2Method) ParamNames() string {
	var resp []string
	for _, param := range m.params {
		resp = append(resp, param.Name)
	}

	return strings.Join(resp, ", ")
}

func (m Eth2Method) ResultNames() string {
	var resp []string
	for _, result := range m.results {
		resp = append(resp, result.Name)
	}

	return strings.Join(resp, ", ")
}

type Field struct {
	Name string
	Type string
}

//nolint:gocognit
func parseEth2Methods(pkg *packages.Package) ([]Eth2Method, error) {
	var resp []Eth2Method
	for _, file := range pkg.Syntax {
		for _, decl := range file.Decls {
			gendecl, ok := decl.(*ast.GenDecl)
			if !ok {
				continue
			}

			if gendecl.Tok != token.TYPE {
				continue
			}

			for _, spec := range gendecl.Specs {
				typeSpec, ok := spec.(*ast.TypeSpec)
				if !ok {
					continue
				}

				iface, ok := typeSpec.Type.(*ast.InterfaceType)
				if !ok {
					continue
				}

				if !strings.HasSuffix(typeSpec.Name.Name, "Provider") {
					continue
				}

				for _, method := range iface.Methods.List {
					fnType, ok := method.Type.(*ast.FuncType)
					if !ok {
						continue
					}

					name := method.Names[0].Name

					if skip[name] {
						continue
					}

					var params []Field
					for _, param := range fnType.Params.List {
						var b bytes.Buffer
						err := printer.Fprint(&b, pkg.Fset, param.Type)
						if err != nil {
							return nil, errors.Wrap(err, "printf")
						}

						typ := b.String()
						if imprt, ok := addImport[typ]; ok {
							typ = imprt + "." + typ
						}

						field := Field{
							Name: param.Names[0].Name,
							Type: typ,
						}

						params = append(params, field)
					}

					var results []Field
					for i, result := range fnType.Results.List {
						var b bytes.Buffer
						err := printer.Fprint(&b, pkg.Fset, result.Type)
						if err != nil {
							return nil, errors.Wrap(err, "printf")
						}

						name := fmt.Sprintf("r%d", i)
						if i == fnType.Results.NumFields()-1 {
							name = "err"
						}

						field := Field{
							Name: name,
							Type: b.String(),
						}

						results = append(results, field)
					}

					resp = append(resp, Eth2Method{
						Name:    name,
						params:  params,
						results: results,
					})
				}
			}
		}
	}

	return resp, nil
}

var (
	matchFirstCap = regexp.MustCompile("(.)([A-Z][a-z]+)")
	matchAllCap   = regexp.MustCompile("([a-z0-9])([A-Z])")
)

func toSnakeCase(str string) string {
	snake := matchFirstCap.ReplaceAllString(str, "${1}_${2}")
	snake = matchAllCap.ReplaceAllString(snake, "${1}_${2}")

	return strings.ToLower(snake)
}
