// Copyright Â© 2021 Obol Technologies Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package eth2metrics

// Code generated by genmetrics.go. DO NOT EDIT.

import (
	eth2client "github.com/attestantio/go-eth2-client"
	"github.com/obolnetwork/charon/app/errors"

	"context"
	api "github.com/attestantio/go-eth2-client/api"
	apiv1 "github.com/attestantio/go-eth2-client/api/v1"
	"github.com/attestantio/go-eth2-client/spec"
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/phase0"
)

func (s *Service) EpochFromStateID(ctx context.Context, stateID string) (r0 phase0.Epoch, err error) {
	defer instrument("epoch_from_state_id")(err)

	r0, err = s.Service.EpochFromStateID(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) SignedBeaconBlock(ctx context.Context, blockID string) (r0 *spec.VersionedSignedBeaconBlock, err error) {
	defer instrument("signed_beacon_block")(err)

	r0, err = s.Service.SignedBeaconBlock(ctx, blockID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconCommittees(ctx context.Context, stateID string) (r0 []*apiv1.BeaconCommittee, err error) {
	defer instrument("beacon_committees")(err)

	r0, err = s.Service.BeaconCommittees(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconCommitteesAtEpoch(ctx context.Context, stateID string, epoch phase0.Epoch) (r0 []*apiv1.BeaconCommittee, err error) {
	defer instrument("beacon_committees_at_epoch")(err)

	r0, err = s.Service.BeaconCommitteesAtEpoch(ctx, stateID, epoch)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) SyncCommittee(ctx context.Context, stateID string) (r0 *apiv1.SyncCommittee, err error) {
	defer instrument("sync_committee")(err)

	r0, err = s.Service.SyncCommittee(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) SyncCommitteeAtEpoch(ctx context.Context, stateID string, epoch phase0.Epoch) (r0 *apiv1.SyncCommittee, err error) {
	defer instrument("sync_committee_at_epoch")(err)

	r0, err = s.Service.SyncCommitteeAtEpoch(ctx, stateID, epoch)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) AggregateAttestation(ctx context.Context, slot phase0.Slot, attestationDataRoot phase0.Root) (r0 *phase0.Attestation, err error) {
	defer instrument("aggregate_attestation")(err)

	r0, err = s.Service.AggregateAttestation(ctx, slot, attestationDataRoot)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) AttestationData(ctx context.Context, slot phase0.Slot, committeeIndex phase0.CommitteeIndex) (r0 *phase0.AttestationData, err error) {
	defer instrument("attestation_data")(err)

	r0, err = s.Service.AttestationData(ctx, slot, committeeIndex)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) AttestationPool(ctx context.Context, slot phase0.Slot) (r0 []*phase0.Attestation, err error) {
	defer instrument("attestation_pool")(err)

	r0, err = s.Service.AttestationPool(ctx, slot)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) AttesterDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) (r0 []*apiv1.AttesterDuty, err error) {
	defer instrument("attester_duties")(err)

	r0, err = s.Service.AttesterDuties(ctx, epoch, validatorIndices)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) SyncCommitteeDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) (r0 []*apiv1.SyncCommitteeDuty, err error) {
	defer instrument("sync_committee_duties")(err)

	r0, err = s.Service.SyncCommitteeDuties(ctx, epoch, validatorIndices)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) SyncCommitteeContribution(ctx context.Context, slot phase0.Slot, subcommitteeIndex uint64, beaconBlockRoot phase0.Root) (r0 *altair.SyncCommitteeContribution, err error) {
	defer instrument("sync_committee_contribution")(err)

	r0, err = s.Service.SyncCommitteeContribution(ctx, slot, subcommitteeIndex, beaconBlockRoot)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconBlockHeader(ctx context.Context, blockID string) (r0 *apiv1.BeaconBlockHeader, err error) {
	defer instrument("beacon_block_header")(err)

	r0, err = s.Service.BeaconBlockHeader(ctx, blockID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconBlockProposal(ctx context.Context, slot phase0.Slot, randaoReveal phase0.BLSSignature, graffiti []byte) (r0 *spec.VersionedBeaconBlock, err error) {
	defer instrument("beacon_block_proposal")(err)

	r0, err = s.Service.BeaconBlockProposal(ctx, slot, randaoReveal, graffiti)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconBlockRoot(ctx context.Context, blockID string) (r0 *phase0.Root, err error) {
	defer instrument("beacon_block_root")(err)

	r0, err = s.Service.BeaconBlockRoot(ctx, blockID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconState(ctx context.Context, stateID string) (r0 *spec.VersionedBeaconState, err error) {
	defer instrument("beacon_state")(err)

	r0, err = s.Service.BeaconState(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BeaconStateRoot(ctx context.Context, stateID string) (r0 *phase0.Root, err error) {
	defer instrument("beacon_state_root")(err)

	r0, err = s.Service.BeaconStateRoot(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) BlindedBeaconBlockProposal(ctx context.Context, slot phase0.Slot, randaoReveal phase0.BLSSignature, graffiti []byte) (r0 *api.VersionedBlindedBeaconBlock, err error) {
	defer instrument("blinded_beacon_block_proposal")(err)

	r0, err = s.Service.BlindedBeaconBlockProposal(ctx, slot, randaoReveal, graffiti)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) Events(ctx context.Context, topics []string, handler eth2client.EventHandlerFunc) (err error) {
	defer instrument("events")(err)

	err = s.Service.Events(ctx, topics, handler)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return err
}

func (s *Service) Finality(ctx context.Context, stateID string) (r0 *apiv1.Finality, err error) {
	defer instrument("finality")(err)

	r0, err = s.Service.Finality(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) Fork(ctx context.Context, stateID string) (r0 *phase0.Fork, err error) {
	defer instrument("fork")(err)

	r0, err = s.Service.Fork(ctx, stateID)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) NodeSyncing(ctx context.Context) (r0 *apiv1.SyncState, err error) {
	defer instrument("node_syncing")(err)

	r0, err = s.Service.NodeSyncing(ctx)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) ProposerDuties(ctx context.Context, epoch phase0.Epoch, validatorIndices []phase0.ValidatorIndex) (r0 []*apiv1.ProposerDuty, err error) {
	defer instrument("proposer_duties")(err)

	r0, err = s.Service.ProposerDuties(ctx, epoch, validatorIndices)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) ValidatorBalances(ctx context.Context, stateID string, validatorIndices []phase0.ValidatorIndex) (r0 map[phase0.ValidatorIndex]phase0.Gwei, err error) {
	defer instrument("validator_balances")(err)

	r0, err = s.Service.ValidatorBalances(ctx, stateID, validatorIndices)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) Validators(ctx context.Context, stateID string, validatorIndices []phase0.ValidatorIndex) (r0 map[phase0.ValidatorIndex]*apiv1.Validator, err error) {
	defer instrument("validators")(err)

	r0, err = s.Service.Validators(ctx, stateID, validatorIndices)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}

func (s *Service) ValidatorsByPubKey(ctx context.Context, stateID string, validatorPubKeys []phase0.BLSPubKey) (r0 map[phase0.ValidatorIndex]*apiv1.Validator, err error) {
	defer instrument("validators_by_pub_key")(err)

	r0, err = s.Service.ValidatorsByPubKey(ctx, stateID, validatorPubKeys)
	if err != nil {
		err = errors.Wrap(err, "eth2http")
	}

	return r0, err
}
