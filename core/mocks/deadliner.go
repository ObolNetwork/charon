// Copyright Â© 2022-2024 Obol Labs Inc. Licensed under the terms of a Business Source License 1.1

// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	core "github.com/obolnetwork/charon/core"
	mock "github.com/stretchr/testify/mock"
)

// Deadliner is an autogenerated mock type for the Deadliner type
type Deadliner struct {
	mock.Mock
}

// Add provides a mock function with given fields: duty
func (_m *Deadliner) Add(duty core.Duty) bool {
	ret := _m.Called(duty)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(core.Duty) bool); ok {
		r0 = rf(duty)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// C provides a mock function with given fields:
func (_m *Deadliner) C() <-chan core.Duty {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for C")
	}

	var r0 <-chan core.Duty
	if rf, ok := ret.Get(0).(func() <-chan core.Duty); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan core.Duty)
		}
	}

	return r0
}

// NewDeadliner creates a new instance of Deadliner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDeadliner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Deadliner {
	mock := &Deadliner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
