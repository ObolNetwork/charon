// Copyright Â© 2022-2025 Obol Labs Inc. Licensed under the terms of a Business Source License 1.1

// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	api "github.com/attestantio/go-eth2-client/api"
	altair "github.com/attestantio/go-eth2-client/spec/altair"

	context "context"

	eth2exp "github.com/obolnetwork/charon/eth2util/eth2exp"

	mock "github.com/stretchr/testify/mock"

	phase0 "github.com/attestantio/go-eth2-client/spec/phase0"

	spec "github.com/attestantio/go-eth2-client/spec"

	v1 "github.com/attestantio/go-eth2-client/api/v1"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// AggregateAttestation provides a mock function with given fields: ctx, opts
func (_m *Handler) AggregateAttestation(ctx context.Context, opts *api.AggregateAttestationOpts) (*api.Response[*spec.VersionedAttestation], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AggregateAttestation")
	}

	var r0 *api.Response[*spec.VersionedAttestation]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.AggregateAttestationOpts) (*api.Response[*spec.VersionedAttestation], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.AggregateAttestationOpts) *api.Response[*spec.VersionedAttestation]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[*spec.VersionedAttestation])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.AggregateAttestationOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttestationData provides a mock function with given fields: ctx, opts
func (_m *Handler) AttestationData(ctx context.Context, opts *api.AttestationDataOpts) (*api.Response[*phase0.AttestationData], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AttestationData")
	}

	var r0 *api.Response[*phase0.AttestationData]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.AttestationDataOpts) (*api.Response[*phase0.AttestationData], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.AttestationDataOpts) *api.Response[*phase0.AttestationData]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[*phase0.AttestationData])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.AttestationDataOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttesterDuties provides a mock function with given fields: ctx, opts
func (_m *Handler) AttesterDuties(ctx context.Context, opts *api.AttesterDutiesOpts) (*api.Response[[]*v1.AttesterDuty], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for AttesterDuties")
	}

	var r0 *api.Response[[]*v1.AttesterDuty]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.AttesterDutiesOpts) (*api.Response[[]*v1.AttesterDuty], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.AttesterDutiesOpts) *api.Response[[]*v1.AttesterDuty]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[[]*v1.AttesterDuty])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.AttesterDutiesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeaconCommitteeSelections provides a mock function with given fields: ctx, opts
func (_m *Handler) BeaconCommitteeSelections(ctx context.Context, opts *api.BeaconCommitteeSelectionsOpts) (*api.Response[[]*v1.BeaconCommitteeSelection], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BeaconCommitteeSelections")
	}

	var r0 *api.Response[[]*v1.BeaconCommitteeSelection]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.BeaconCommitteeSelectionsOpts) (*api.Response[[]*v1.BeaconCommitteeSelection], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.BeaconCommitteeSelectionsOpts) *api.Response[[]*v1.BeaconCommitteeSelection]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[[]*v1.BeaconCommitteeSelection])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.BeaconCommitteeSelectionsOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeVersion provides a mock function with given fields: ctx, opts
func (_m *Handler) NodeVersion(ctx context.Context, opts *api.NodeVersionOpts) (*api.Response[string], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for NodeVersion")
	}

	var r0 *api.Response[string]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.NodeVersionOpts) (*api.Response[string], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.NodeVersionOpts) *api.Response[string]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[string])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.NodeVersionOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Proposal provides a mock function with given fields: ctx, opts
func (_m *Handler) Proposal(ctx context.Context, opts *api.ProposalOpts) (*api.Response[*api.VersionedProposal], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Proposal")
	}

	var r0 *api.Response[*api.VersionedProposal]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ProposalOpts) (*api.Response[*api.VersionedProposal], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ProposalOpts) *api.Response[*api.VersionedProposal]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[*api.VersionedProposal])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ProposalOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposerConfig provides a mock function with given fields: ctx
func (_m *Handler) ProposerConfig(ctx context.Context) (*eth2exp.ProposerConfigResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProposerConfig")
	}

	var r0 *eth2exp.ProposerConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*eth2exp.ProposerConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *eth2exp.ProposerConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*eth2exp.ProposerConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProposerDuties provides a mock function with given fields: ctx, opts
func (_m *Handler) ProposerDuties(ctx context.Context, opts *api.ProposerDutiesOpts) (*api.Response[[]*v1.ProposerDuty], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for ProposerDuties")
	}

	var r0 *api.Response[[]*v1.ProposerDuty]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ProposerDutiesOpts) (*api.Response[[]*v1.ProposerDuty], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ProposerDutiesOpts) *api.Response[[]*v1.ProposerDuty]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[[]*v1.ProposerDuty])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ProposerDutiesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAggregateAttestations provides a mock function with given fields: ctx, opts
func (_m *Handler) SubmitAggregateAttestations(ctx context.Context, opts *api.SubmitAggregateAttestationsOpts) error {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAggregateAttestations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SubmitAggregateAttestationsOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitAttestations provides a mock function with given fields: ctx, opts
func (_m *Handler) SubmitAttestations(ctx context.Context, opts *api.SubmitAttestationsOpts) error {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAttestations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SubmitAttestationsOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitBlindedProposal provides a mock function with given fields: ctx, opts
func (_m *Handler) SubmitBlindedProposal(ctx context.Context, opts *api.SubmitBlindedProposalOpts) error {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitBlindedProposal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SubmitBlindedProposalOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitProposal provides a mock function with given fields: ctx, opts
func (_m *Handler) SubmitProposal(ctx context.Context, opts *api.SubmitProposalOpts) error {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SubmitProposal")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SubmitProposalOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitSyncCommitteeContributions provides a mock function with given fields: ctx, contributionAndProofs
func (_m *Handler) SubmitSyncCommitteeContributions(ctx context.Context, contributionAndProofs []*altair.SignedContributionAndProof) error {
	ret := _m.Called(ctx, contributionAndProofs)

	if len(ret) == 0 {
		panic("no return value specified for SubmitSyncCommitteeContributions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*altair.SignedContributionAndProof) error); ok {
		r0 = rf(ctx, contributionAndProofs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitSyncCommitteeMessages provides a mock function with given fields: ctx, messages
func (_m *Handler) SubmitSyncCommitteeMessages(ctx context.Context, messages []*altair.SyncCommitteeMessage) error {
	ret := _m.Called(ctx, messages)

	if len(ret) == 0 {
		panic("no return value specified for SubmitSyncCommitteeMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*altair.SyncCommitteeMessage) error); ok {
		r0 = rf(ctx, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitValidatorRegistrations provides a mock function with given fields: ctx, registrations
func (_m *Handler) SubmitValidatorRegistrations(ctx context.Context, registrations []*api.VersionedSignedValidatorRegistration) error {
	ret := _m.Called(ctx, registrations)

	if len(ret) == 0 {
		panic("no return value specified for SubmitValidatorRegistrations")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*api.VersionedSignedValidatorRegistration) error); ok {
		r0 = rf(ctx, registrations)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubmitVoluntaryExit provides a mock function with given fields: ctx, voluntaryExit
func (_m *Handler) SubmitVoluntaryExit(ctx context.Context, voluntaryExit *phase0.SignedVoluntaryExit) error {
	ret := _m.Called(ctx, voluntaryExit)

	if len(ret) == 0 {
		panic("no return value specified for SubmitVoluntaryExit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *phase0.SignedVoluntaryExit) error); ok {
		r0 = rf(ctx, voluntaryExit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SyncCommitteeContribution provides a mock function with given fields: ctx, opts
func (_m *Handler) SyncCommitteeContribution(ctx context.Context, opts *api.SyncCommitteeContributionOpts) (*api.Response[*altair.SyncCommitteeContribution], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SyncCommitteeContribution")
	}

	var r0 *api.Response[*altair.SyncCommitteeContribution]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeContributionOpts) (*api.Response[*altair.SyncCommitteeContribution], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeContributionOpts) *api.Response[*altair.SyncCommitteeContribution]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[*altair.SyncCommitteeContribution])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.SyncCommitteeContributionOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncCommitteeDuties provides a mock function with given fields: ctx, opts
func (_m *Handler) SyncCommitteeDuties(ctx context.Context, opts *api.SyncCommitteeDutiesOpts) (*api.Response[[]*v1.SyncCommitteeDuty], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SyncCommitteeDuties")
	}

	var r0 *api.Response[[]*v1.SyncCommitteeDuty]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeDutiesOpts) (*api.Response[[]*v1.SyncCommitteeDuty], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeDutiesOpts) *api.Response[[]*v1.SyncCommitteeDuty]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[[]*v1.SyncCommitteeDuty])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.SyncCommitteeDutiesOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncCommitteeSelections provides a mock function with given fields: ctx, opts
func (_m *Handler) SyncCommitteeSelections(ctx context.Context, opts *api.SyncCommitteeSelectionsOpts) (*api.Response[[]*v1.SyncCommitteeSelection], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for SyncCommitteeSelections")
	}

	var r0 *api.Response[[]*v1.SyncCommitteeSelection]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeSelectionsOpts) (*api.Response[[]*v1.SyncCommitteeSelection], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.SyncCommitteeSelectionsOpts) *api.Response[[]*v1.SyncCommitteeSelection]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[[]*v1.SyncCommitteeSelection])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.SyncCommitteeSelectionsOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validators provides a mock function with given fields: ctx, opts
func (_m *Handler) Validators(ctx context.Context, opts *api.ValidatorsOpts) (*api.Response[map[phase0.ValidatorIndex]*v1.Validator], error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for Validators")
	}

	var r0 *api.Response[map[phase0.ValidatorIndex]*v1.Validator]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *api.ValidatorsOpts) (*api.Response[map[phase0.ValidatorIndex]*v1.Validator], error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *api.ValidatorsOpts) *api.Response[map[phase0.ValidatorIndex]*v1.Validator]); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Response[map[phase0.ValidatorIndex]*v1.Validator])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *api.ValidatorsOpts) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
